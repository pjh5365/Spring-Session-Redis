pipeline {
    agent any

    environment {
        SSH_PASSWORD = credentials('SSH_PASSWORD')       // Jenkins Credential ID
        PRIVATE_SERVER = 'root@10.0.1.6'                // Private server address
        GITLAB_REPO = 'http://223.130.137.86/pjh5365/spring-session-redis.git' // GitLab Repository URL
        APP_PATH = '/app'                               // Application path in container
    }

    stages {
        stage('Execute Commands on Private Server') {
            steps {
                echo 'Private Subnet 서버 접속'
                withCredentials([file(credentialsId: 'PEM_FILE', variable: 'PEM_FILE')]) {
                    sh '''
                    # PEM 파일 복사
                    cp ${PEM_FILE} .ssh.pem
                    # SSH 키 파일 권한 설정
                    chmod 600 ssh.pem

                    # SSH를 통해 접속
                    export SSHPASS="${SSH_PASSWORD}"
                    sshpass -e ssh -o StrictHostKeyChecking=no -i ssh.pem ${PRIVATE_SERVER} << EOF
                    mkdir -p /opt/app/spring-session-redis
                    cd /opt/app/spring-session-redis
                    if [ -d .git ]; then
                      git reset --hard
                      git pull origin main
                    else
                      git clone ${GITLAB_REPO} .
                    fi

                    chmod +x ./gradlew
                    ./gradlew clean build -x test

                    docker stop spring-jenkins-app || true
                    docker rm spring-jenkins-app || true
                    docker run -d --name spring-jenkins-app \\
                      -v /opt/app/spring-session-redis/build/libs/*-SNAPSHOT.jar:${APP_PATH}/app.jar \\
                      -p 8080:8080 eclipse-temurin:17-jre java -jar ${APP_PATH}/app.jar
                    EOF
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed!'
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
